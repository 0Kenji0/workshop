[
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.1-find-account-id/",
	"title": "Create Key Pair",
	"tags": [],
	"description": "",
	"content": "Create a Key Pair In the Network \u0026amp; Security section of the EC2 interface:\nSelect Key Pairs Select Create Key Pair In the initialization interface:\nIn the Name section, set it by your own way In the Key Pair type section, select RSA In the Private key file format section, select .pem Scroll down to the bottom of the page and select Create key pair Note Key pair is required when initializing EC2.\n"
},
{
	"uri": "//localhost:1313/",
	"title": "Deploy Website",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Content\nCreate Key Pair Deploy and Configure EC2 instance Create Security Group Connect MongoDB Atlas "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Setup EC2 environment for Backend",
	"tags": [],
	"description": "",
	"content": "GET INTO EC2 CMD 1.After you launch instance successfully, click on the newest one just created Then click connect and you will get a EC2 Command Prompt on your new tab Then typing sudo yum install -y nodejs to download, it takes a while to download dont worry After that type sudo npm install -g pm2 Type sudo yum install -y git and then wait for them downloading **sudo yum install -y nodejs** **sudo npm install -g pm2**\r**sudo yum install -y git**\rAll commands are here!!! 2.Configure MongoDB into EC2 instance\nNow link Database from MongoDB to EC2 command prompt and create an .env file Type echo \u0026ldquo;MONGO_URI=mongodb+srv://baker_user:\u0026lt;db_password\u0026gt;@\u0026lt;YOUR_CLUSTER\u0026gt;.tiggcso.mongodb.net/?retryWrites=true\u0026amp;w=majority\u0026amp;appName=\u0026lt;YOUR_CLUSTER\u0026gt; \u0026gt; .env Type echo \u0026ldquo;JWT_SECRET=baker_jwt_secret_key_2024\u0026rdquo;\u0026raquo; .env Type echo \u0026ldquo;PORT=5001\u0026rdquo;\u0026raquo; .env Type echo \u0026ldquo;NODE_ENV=production\u0026rdquo;\u0026raquo; .env -Check the version and then you ready to go #Clone your backend repository git clone [your-backend-repo-url] cd [your-backend-directory] **sudo yum install -y nodejs** **sudo npm install -g pm2**\r**sudo yum install -y git**\rAfter cloning the project, continue running the following commands Build application npm run build Start with PM2:pm2 start app.js \u0026ndash;name \u0026ldquo;baker-backend\u0026rdquo; Save PM2 configuration: pm2 save pm2 startups You can check by this commands: cd backend nano app.js "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.2-update-account/",
	"title": "Deploy and Configure EC2",
	"tags": [],
	"description": "",
	"content": "CONTENT Create EC2 Go to EC2 Instance Choose Launch Instances Configure EC2 Name the instance Then follow of these steps Note: Choose the free tier Choose the free tier to save your money!!!\rSelect your Key Pair Choose your Firewall type(if you dont have any of them just create like the step) Launch instance "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/",
	"title": "Install NodeJS and setup backend on EC2",
	"tags": [],
	"description": "",
	"content": "Install NodeJS Deploying the backend on AWS is made seamless with Amazon EC2, a cornerstone of AWS services. Here are some of its standout features: Amazon EC2 functions like traditional virtual or physical servers but offers rapid initialization, flexible resource scaling, and simplified management. By virtualizing physical servers into multiple virtual instances, it maximizes hardware resource utilization. Amazon EC2 supports a wide range of workloads, including web hosting, application deployment, database management, authentication services, and virtually any task a conventional server can handle. "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.3-aws-account-alias/",
	"title": "Connect to MongoDB Atlas",
	"tags": [],
	"description": "",
	"content": "Connect to mongoDB Atlas Go to MongoDB Atlas\n1.Configuration\nCreate MongoDB Account Select build Cluster Then Create 2.Setup your cluster\nName your Cluster Choose AWS Provider Region(Should choose along with your EC2 Region to avoid errors) Then Create 3.Cluster connection\nInstall mongoDB in your Command prompt Copy the link to the Cluster, \u0026lt;db_username\u0026gt;:\u0026lt;db_password\u0026gt;@cluster0â€¦ replace \u0026lt;db_username\u0026gt; and \u0026lt;db_password\u0026gt; with username and password on the Set up connection page above. Make sure this link to connect to the database and EC2. "
},
{
	"uri": "//localhost:1313/3-create-admin-user-and-group/",
	"title": "Setup Frontend on AWS",
	"tags": [],
	"description": "",
	"content": "Access to S3 Create S3 Bucket for frontend Fill your name bucket Choose general type s3 Unchoose Block all access Disable version Choose first encryption type Enable bucket key After finishing those steps you just click into s3 and upload your files Choose the file correctly then follow the steps below When you finish click the link on s3 to make sure it works Access your File to upload all the file you need After created your S3 bucket click into it Find permission tag and scroll down Click edit -Paste this code into S3 edit permission: {\r\u0026quot;Version\u0026quot;: \u0026quot;2012-10-17\u0026quot;,\r\u0026quot;Statement\u0026quot;: [\r{\r\u0026quot;Sid\u0026quot;: \u0026quot;PublicReadGetObject\u0026quot;,\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Principal\u0026quot;: \u0026quot;*\u0026quot;,\r\u0026quot;Action\u0026quot;: \u0026quot;s3:GetObject\u0026quot;,\r\u0026quot;Resource\u0026quot;: \u0026quot;arn:aws:s3:::baker-frontend-2024/*\u0026quot;\r},\r{\r\u0026quot;Sid\u0026quot;: \u0026quot;AllowCloudFrontServicePrincipal\u0026quot;,\r\u0026quot;Effect\u0026quot;: \u0026quot;Allow\u0026quot;,\r\u0026quot;Principal\u0026quot;: {\r\u0026quot;Service\u0026quot;: \u0026quot;cloudfront.amazonaws.com\u0026quot;\r},\r\u0026quot;Action\u0026quot;: \u0026quot;s3:GetObject\u0026quot;,\r\u0026quot;Resource\u0026quot;: \u0026quot;arn:aws:s3:::baker-frontend-2024/*\u0026quot;,\r\u0026quot;Condition\u0026quot;: {\r\u0026quot;ArnLike\u0026quot;: {\r\u0026quot;AWS:SourceArn\u0026quot;: \u0026quot;arn:aws:cloudfront::235007105677:distribution/EXB54XU4GB8MK\u0026quot;\r}\r}\r}\r]\r}\rScroll down until you find a link on S3 bucket Next step going to CloudFront After finishing that click on the newest CloudFront you created Do all these steps and you are ready to deploy your web Click on the link below CloudFront you deployed and see how it works "
},
{
	"uri": "//localhost:1313/4-verify-new-account/",
	"title": "Setup batch AWS into Project",
	"tags": [],
	"description": "",
	"content": "BATCH AWS TO OPTIMIZE Create a new permission role Search Batch and create a batch on AWS { \u0026ldquo;Version\u0026rdquo;: \u0026ldquo;2012-10-17\u0026rdquo;, \u0026ldquo;Statement\u0026rdquo;: [ { \u0026ldquo;Effect\u0026rdquo;: \u0026ldquo;Allow\u0026rdquo;, \u0026ldquo;Action\u0026rdquo;: [ \u0026ldquo;sts:AssumeRole\u0026rdquo; ], \u0026ldquo;Principal\u0026rdquo;: { \u0026ldquo;Service\u0026rdquo;: [ \u0026ldquo;batch.amazonaws.com\u0026rdquo; ] } } ] }\nAfter that move to AWS BATCH and create a new batch Create a Job queue Configure BATCH When you done it will show you a dashboard This batch keep you testing all datas you added and it shows you the percentage of the data when input This is a demo when you input data into BATCH "
},
{
	"uri": "//localhost:1313/5-clean-resources/",
	"title": "Clean resources",
	"tags": [],
	"description": "",
	"content": "CLEAN RESOURCES 1.Terminate EC2 instance: Go to EC2 Management Console On the left navigation bar, select Intances Select all relevant EC2 Instances. Click Actions. Click Manage Instance State. Select Terminate. Click Change State 2.Delete S3 Bucket Go to AWS S3. In the Bucket name list, select the relevant bucket. Select Empty. On the Empty bucket page, confirm and select Empty. Select Delete bucket 3.Delete Cloudfront Distribution Go to Cloudfront Management Console On the left navigation bar, select Distribution Select the relevant Distribution. Select Delete 4.Delete Launch Template: Go to EC2 Management Console On the left navigation bar, select Launch Templates Select the relevant Launch Template. Click Actions. Click Delete template Type delete in the blank box and press delete 5.Delete Batch Go to Batch On the left navigation bar, select Dashboard On the left navigation bar, select Job queue overview Select the relevant Jobs Click Delete on the right side "
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]