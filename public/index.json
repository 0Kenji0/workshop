[
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.1-find-account-id/",
	"title": "Create Key Pair",
	"tags": [],
	"description": "",
	"content": "Create a Key Pair In the Network \u0026amp; Security section of the EC2 interface:\nSelect Key Pairs Select Create Key Pair In the initialization interface:\nIn the Name section, set it by your own way In the Key Pair type section, select RSA In the Private key file format section, select .pem Scroll down to the bottom of the page and select Create key pair Note Key pair is required when initializing EC2.\n"
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/",
	"title": "Preparation Steps",
	"tags": [],
	"description": "",
	"content": "Content\nCreate Key Pair Deploy and Configure EC2 instance Create Security Group Connect MongoDB Atlas "
},
{
	"uri": "//localhost:1313/",
	"title": "Setting up an AWS account",
	"tags": [],
	"description": "",
	"content": "Creating your first AWS account Overview In this first lab, you will be creating your new AWS account and use Multi-factor Authentication (MFA) to improve your account security. Next, you will create an Administrator Group and Admin User to manage access to resources in your account instead of using the root user. Finally, we will step through account authentication with AWS Support in the event you experience authentication problems.\nAWS Account An AWS account is the basic container for all the AWS resources you can create as an AWS customer. By default, each AWS account will have a root user. The root user has full access within your AWS account, and root user permissions cannot be limited. When you first create your AWS account, you will be assessing it as the root user.\nAs a best practice, do not use the AWS account root user for any task where it\u0026rsquo;s not required. Instead, create a new IAM user for each person that requires administrator access. Thereafter, the users in the administrators user group should set up the user groups, users, and so on, for the AWS account. All future interaction should be through the AWS account\u0026rsquo;s users and their own keys instead of the root user. However, to perform some account and service management tasks, you must log in using the root user credentials.\nMulti-Factor Authentication (MFA) MFA adds extra security because it requires users to provide unique authentication from an AWS supported MFA mechanism in addition to their regular sign-in credentials when they access AWS websites or services.\nIAM User Group An IAM user group is a collection of IAM users. User groups let you specify permissions for multiple users, which can make it easier to manage the permissions for those users. Any user in that user group automatically has the permissions that are assigned to the user group.\nIAM User An IAM user is an entity that you create in AWS to represent the person or application that uses it to interact with AWS. A user in AWS consists of a name and credentials. Please note that an IAM user with administrator permissions is not the same thing as the AWS account root user.\nAWS Support AWS Basic Support offers all AWS customers access to our Resource Center, Service Health Dashboard, Product FAQs, Discussion Forums, and Support for Health Checks – at no additional charge. Customers who desire a deeper level of support can subscribe to AWS Support at the Developer, Business, or Enterprise level.\nCustomers who choose AWS Support gain one-on-one, fast-response support from AWS engineers. The service helps customers use AWS\u0026rsquo;s products and features. With pay-by-the-month pricing and unlimited support cases, customers are freed from long-term commitments. Customers with operational issues or technical questions can contact a team of support engineers and receive predictable response times and personalized support.\nMain Content Creating a new AWS Account Setting up MFA for the AWS Account root user Creating an Administrator Accounts and Groups Getting support for Account Authentication "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/1-virtual-mfa-device/",
	"title": "Setup EC2 environment for Backend",
	"tags": [],
	"description": "",
	"content": "GET INTO EC2 CMD 1.After you launch instance successfully, click on the newest one just created Then click connect and you will get a EC2 Command Prompt on your new tab Then typing sudo yum install -y nodejs to download, it takes a while to download dont worry After that type sudo npm install -g pm2 Type sudo yum install -y git and then wait for them downloading **sudo yum install -y nodejs** **sudo npm install -g pm2**\r**sudo yum install -y git**\rAll commands are here!!! 2.Configure MongoDB into EC2 instance\nNow link Database from MongoDB to EC2 command prompt and create an .env file\nType echo \u0026ldquo;MONGO_URI=mongodb+srv://baker_user:\u0026lt;db_password\u0026gt;@\u0026lt;YOUR_CLUSTER\u0026gt;.tiggcso.mongodb.net/?retryWrites=true\u0026amp;w=majority\u0026amp;appName=\u0026lt;YOUR_CLUSTER\u0026gt; \u0026gt; .env\nType echo \u0026ldquo;JWT_SECRET=baker_jwt_secret_key_2024\u0026rdquo;\u0026raquo; .env\nType echo \u0026ldquo;PORT=5001\u0026rdquo;\u0026raquo; .env\nType echo \u0026ldquo;NODE_ENV=production\u0026rdquo;\u0026raquo; .env\nDeploying the backend on AWS is streamlined with Amazon EC2, a foundational service of AWS. Here’s why it stands out:\nAmazon EC2 operates like traditional virtual or physical servers but offers rapid setup, dynamic resource scaling, and effortless management.\nBy virtualizing physical servers into multiple instances, it ensures optimal utilization of hardware resources.\nAmazon EC2 supports diverse workloads, including web hosting, application deployment, database management, authentication services, and virtually any task a conventional server can handle.\n"
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.2-update-account/",
	"title": "Deploy and Configure EC2",
	"tags": [],
	"description": "",
	"content": "CONTENT Create EC2 Go to EC2 Instance Choose Launch Instances Configure EC2 Name the instance Then follow of these steps Note: Choose the free tier Choose the free tier to save your money!!!\rSelect your Key Pair Choose your Firewall type(if you dont have any of them just create like the step) Launch instance "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/",
	"title": "Install NodeJS and setup backend on EC2",
	"tags": [],
	"description": "",
	"content": "Install NodeJS Deploying the backend on AWS is made seamless with Amazon EC2, a cornerstone of AWS services. Here are some of its standout features: Amazon EC2 functions like traditional virtual or physical servers but offers rapid initialization, flexible resource scaling, and simplified management. By virtualizing physical servers into multiple virtual instances, it maximizes hardware resource utilization. Amazon EC2 supports a wide range of workloads, including web hosting, application deployment, database management, authentication services, and virtually any task a conventional server can handle. "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/2-u2f-security-key/",
	"title": "U2F Security Key",
	"tags": [],
	"description": "",
	"content": "Content\nEnable U2F security key via Console If you do not have a hardware device, you can skip the steps below.\nEnable U2F security key via Console U2F Security Key is an open authentication protocol that allows users to access online services with a unique security key without using any software.\nSign in to the AWS Console.\nIn the upper right corner, you will see your account name, select and select My Security Credentials then expand Multi-factor authentication (MFA).\nTo manage U2F security keys, you must have permissions from the following set of permissions. in the left sidebar, select Policies then select Create policy, select JSON tab and paste the below:\n{ \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. This is a screen of Tags, a tool used to differentiate AWS resources. Select Next: Review. This is the screen that allows you to review the permission set you are creating. Enter the permission set name (eg MFAHardDevice) and select Create policy. In the left sidebar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) then select Active MFA.\nIn Manage MFA Device, select U2F security key then press Continue.\nPlug the U2F security key into the computer\u0026rsquo;s USB port.\nClick the U2F security key, and then select Close when U2F is successfully set up. "
},
{
	"uri": "//localhost:1313/1-create-new-aws-account/1.3-aws-account-alias/",
	"title": "Connect to MongoDB Atlas",
	"tags": [],
	"description": "",
	"content": "Connect to mongoDB Atlas Go to MongoDB Atlas\n1.Configuration\nCreate MongoDB Account Select build Cluster Then Create 2.Setup your cluster\nName your Cluster Choose AWS Provider Region(Should choose along with your EC2 Region to avoid errors) Then Create 3.Cluster connection\nInstall mongoDB in your Command prompt Copy the link to the Cluster, \u0026lt;db_username\u0026gt;:\u0026lt;db_password\u0026gt;@cluster0… replace \u0026lt;db_username\u0026gt; and \u0026lt;db_password\u0026gt; with username and password on the Set up connection page above. Make sure this link to connect to the database and EC2. "
},
{
	"uri": "//localhost:1313/3-create-admin-user-and-group/",
	"title": "Install NodeJS and setup backend on EC2",
	"tags": [],
	"description": "",
	"content": "Creating an Admin Group "
},
{
	"uri": "//localhost:1313/2-mfa-setup-for-aws-user-root/3-other-hardware-mfa-device/",
	"title": "Other Hardware MFA Device",
	"tags": [],
	"description": "",
	"content": "Content\nEnable other hardware MFA device through the Console Enable other hardware MFA device through the Console Sign in to the AWS Console. In the upper right corner, you will see your account name, select and select My Security Credentials then expand Multi-factor authentication (MFA). To manage U2F security keys, you must have permissions from the following set of permissions. in the left sidebar, select Policies then select Create policy, select JSON tab and paste the below: { \u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;, \u0026#34;Statement\u0026#34;: [ { \u0026#34;Sid\u0026#34;: \u0026#34;AllowManageOwnUserMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;, \u0026#34;Action\u0026#34;: [ \u0026#34;iam:DeactivateMFADevice\u0026#34;, \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34; }, { \u0026#34;Sid\u0026#34;: \u0026#34;DenyAllExceptListedIfNoMFA\u0026#34;, \u0026#34;Effect\u0026#34;: \u0026#34;Deny\u0026#34;, \u0026#34;NotAction\u0026#34;: [ \u0026#34;iam:EnableMFADevice\u0026#34;, \u0026#34;iam:GetUser\u0026#34;, \u0026#34;iam:ListMFADevices\u0026#34;, \u0026#34;iam:ResyncMFADevice\u0026#34; ], \u0026#34;Resource\u0026#34;: \u0026#34;arn:aws:iam::*:user/${aws:username}\u0026#34;, \u0026#34;Condition\u0026#34;: { \u0026#34;BoolIfExists\u0026#34;: { \u0026#34;aws:MultiFactorAuthPresent\u0026#34;: \u0026#34;false\u0026#34; } } } ] } Select Next: Tags. This is a screen of Tags, a tool used to differentiate AWS resources. Select Next: Review. This is the screen that allows you to review the permission set you are creating. Enter the permission set name (eg MFAHardDevice) and select Create policy. In the left sidebar, select Dashboard and then select Enable MFA. Expand Multi-factor authentication (MFA) then select Active MFA.\nIn Manage MFA Device, select Other Hardware MFA Device then click Continue.\nEnter Serial Number on the back of the device.\nEnter MFA code 1 then wait 30 seconds and enter MFA code 2. Select Assign MFA. "
},
{
	"uri": "//localhost:1313/4-verify-new-account/",
	"title": "Getting support for Account Authentication",
	"tags": [],
	"description": "",
	"content": "Content:\nCheck the information Create a support case with AWS Support During the AWS account creation process, at the contact phone number verification step, sometimes there will be a situation where no SMS or calls from AWS will be received. In that case, follow these steps to complete the account information verification:\nCheck the information First, double-check your account information and make sure it\u0026rsquo;s entered correctly:\nYou have entered the phone number information and selected the correct international area code to receive the call. If you use a mobile phone, check your phone to make sure you are still within range to receive calls. Payment method information has been entered correctly. Make sure that the phone number you provide in your AWS account is reachable.\nCreate a support case with AWS Support After checking that the information is correct but still has not received the verification call, AWS Support will assist you to activate your account manually.\nGo to the AWS Support console, select Create case. Select Account and billing support and enter the support information: Type: select Account. Category: select Activation. Subject: briefly write down your situation (eg Did not receive an SMS message or call for verification) Description: Provide details of the situation encountered and information about the time you need support to activate the account. Attachments: Attach an image describing the authentication step you are facing. Under Contact options, select Chat under Contact methods. Select Submit. 5. The AWS Support team will contact and assist in activating your account.\nYou can create a support request with AWS Support even if your account is not activated.\n"
},
{
	"uri": "//localhost:1313/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "//localhost:1313/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]